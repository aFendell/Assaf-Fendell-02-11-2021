{"version":3,"sources":["cmps/Header.jsx","services/forecast-service.js","redux/weatherSlice.js","redux/forecastSlice.js","redux/appSlice.js","cmps/SearchForm.jsx","cmps/LocationCurrentWeather.jsx","cmps/DayForecastItem.jsx","cmps/LocationForecast.jsx","pages/WeatherPage.jsx","cmps/FavoriteItem.jsx","cmps/FavoritesList.jsx","pages/FavoritesPage.jsx","App.js","redux/store.js","index.js"],"names":["useStyles","makeStyles","appBar","marginBottom","logo","flexGrow","cursor","typographyStyles","justifyContent","navlinks","flex","link","textDecoration","color","fontSize","marginLeft","marginRight","borderBottom","Header","toggleDarkMode","classes","AppBar","position","className","Toolbar","lg","Typography","variant","to","FormControlLabel","control","Switch","onChange","dayjs","extend","advancedFormat","gLocationOptions","require","gCurrentWeather","gFiveDayForcast","forecastService","getLocationOptions","getCurrentConditions","getFiveDayForcast","getFavoritesWeather","searchText","a","data","length","console","log","locationKey","locationName","currentConditions","_formatCurrentDayData","favoriteLocations","favoritesWeather","Promise","all","map","location","Key","LocalizedName","locationWeather","push","date","LocalObservationDateTime","format","weekday","currHour","weatherDescription","WeatherText","weatherIcon","WeatherIcon","temperature","Temperature","Metric","Value","temperatureUnit","Unit","getCurrentWeather","createAsyncThunk","payload","currentWeather","weatherSlice","createSlice","name","initialState","isLoading","isError","reducers","extraReducers","pending","state","status","fulfilled","action","rejected","getForecast","forecast","forecastSlice","locationForecast","appSlice","currentLocation","isDarkMode","setCurrentLocation","addToFavorites","removeFromFavorites","filter","actions","SearchForm","submitSearch","handleSearchChange","searchOptions","searchForm","useState","searchTxt","setSearchTxt","useEffect","onSubmit","ev","preventDefault","Autocomplete","clearOnBlur","onSelect","target","value","onInputChange","required","freeSolo","id","options","option","renderInput","params","TextField","sx","ml","placeholder","InputProps","type","LocationCurrentWeather","isNight","setIsNight","selectDayNightIcon","Card","CardContent","Grid","container","spacing","item","xs","component","NightsStayOutlined","WbSunnyOutlined","mb","DayForecastItem","dayForcast","Date","Minimum","Maximum","LocationForecast","DailyForecasts","WeatherPage","setSearchOptions","useSelector","app","weather","dispatch","useDispatch","isFavorite","setIsFavorite","result","selectedLocation","find","err","Paper","Checkbox","checked","icon","checkedIcon","layout","display","flag","alignSelf","content","FavoriteItem","history","useHistory","md","sm","IconButton","onClick","FavoritesList","favoritesToDisplay","FavoritesPage","setFavoritesToDisplay","loadFavoritesWeather","Container","App","setIsDarkMode","theme","createTheme","palette","primary","main","secondary","background","paper","default","ThemeProvider","path","store","configureStore","reducer","weatherReducer","forecastReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c3016bfb.chunk.js","sourcesContent":["import { AppBar, FormControlLabel, Switch, Toolbar, Typography } from \"@material-ui/core\";\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    appBar: {\r\n        marginBottom: \"20px\",\r\n    },\r\n    logo: {\r\n        flexGrow: \"1\",\r\n        cursor: \"pointer\",\r\n    },\r\n    typographyStyles: {\r\n        justifyContent: \"space-between\"\r\n    },\r\n    navlinks: {\r\n        flex: 1,\r\n        justifyContent: \"space-around\"\r\n    },\r\n    link: {\r\n        textDecoration: \"none\",\r\n        color: \"white\",\r\n        fontSize: \"20px\",\r\n        marginLeft: \"20px\",\r\n        marginRight: \"20px\",\r\n        \"&:hover\": {\r\n            borderBottom: \"1px solid white\",\r\n        },\r\n    },\r\n}))\r\n\r\nexport const Header = ({ toggleDarkMode }) => {\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <AppBar position=\"static\" className={classes.appBar}>\r\n            <Toolbar className={classes.typographyStyles} lg={8}>\r\n                <Typography variant=\"h5\" className={classes.logo}>\r\n                    HWA\r\n                </Typography>\r\n                <div className={classes.navlinks}>\r\n                    <Link to=\"/\" className={classes.link}>Weather</Link>\r\n                    <Link to=\"/favorites\" className={classes.link}>Favorites</Link>\r\n                </div>\r\n                <FormControlLabel\r\n                    control={<Switch\r\n                        onChange={toggleDarkMode}\r\n                        color=\"secondary\" />}\r\n                />\r\n            </Toolbar>\r\n        </AppBar>\r\n    )\r\n}","import axios from \"axios\"\r\n\r\nimport dayjs from \"dayjs\";\r\nimport advancedFormat from 'dayjs/plugin/advancedFormat'\r\n\r\ndayjs.extend(advancedFormat)\r\n\r\nconst gLocationOptions = require('../data/autocomplete.json')\r\nconst gCurrentWeather = require('../data/locationsCurrentShort.json')\r\nconst gFiveDayForcast = require('../data/fiveDayForecast.json')\r\n\r\nconst BASE_URL = 'http://dataservice.accuweather.com'\r\nconst AUTOCOMPLETE_URL = 'locations/v1/cities/autocomplete'\r\nconst CURRENT_URL = 'currentconditions/v1'\r\nconst FORECAST_URL = 'forecasts/v1/daily/5day'\r\nconst API_KEY = 'cKe9JLmcY0Ywyoxx6aul2TRc4GtNLgqO'\r\n\r\nexport const forecastService = {\r\n    getLocationOptions,\r\n    getCurrentConditions,\r\n    getFiveDayForcast,\r\n    getFavoritesWeather,\r\n}\r\n\r\n\r\nasync function getLocationOptions(searchText) {\r\n\r\n    //////////// Test data/////////////////\r\n    const data = gLocationOptions\r\n    ////////////////////////////////////////////////////////////////////////////\r\n\r\n    // const { data } = await axios.get(`${BASE_URL}/${AUTOCOMPLETE_URL}`, { params: { apikey: API_KEY, q: searchText } })\r\n    if (!data || data.length === 0) {\r\n        console.log('Could not find the location you requested.');\r\n        return\r\n    }\r\n\r\n    return data\r\n}\r\n\r\n\r\nasync function getCurrentConditions(locationKey, locationName) {\r\n\r\n    //////////// Test data/////////////////\r\n    const data = await gCurrentWeather\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    // const { data } = await axios.get(`${BASE_URL}/${CURRENT_URL}/${locationKey}`, { params: { apikey: API_KEY } })\r\n    if (!data || data.length === 0) {\r\n        console.log('Somthing went wrong.');\r\n        return data\r\n    }\r\n    const currentConditions = _formatCurrentDayData(locationKey, locationName, data[0])\r\n    return currentConditions\r\n}\r\n\r\nasync function getFavoritesWeather(favoriteLocations) {\r\n    const favoritesWeather = []\r\n    if (!favoriteLocations || favoriteLocations.length === 0) return favoritesWeather\r\n    await Promise.all(favoriteLocations.map(async (location) => {\r\n        const { Key, LocalizedName } = location\r\n        const locationWeather = await getCurrentConditions(Key, LocalizedName)\r\n        favoritesWeather.push(locationWeather)\r\n    }))\r\n    return favoritesWeather\r\n}\r\n\r\n\r\n// 3. get location 5 days forecast\r\nasync function getFiveDayForcast(locationKey) {\r\n    //////////// Test data/////////////////\r\n    const data = gFiveDayForcast\r\n    /////////////////////////////////////////////////////\r\n\r\n    // const { data } = await axios.get(`${BASE_URL}/${FORECAST_URL}/${locationKey}`, { params: { apikey: API_KEY, metric: true } })\r\n    if (!data || data.length === 0) {\r\n        console.log('Somthing went wrong.');\r\n        return\r\n    }\r\n    return data\r\n}\r\n\r\nfunction _formatCurrentDayData(locationKey, locationName, data) {\r\n    return {\r\n        locationKey: locationKey,\r\n        locationName: locationName,\r\n        date: dayjs(data.LocalObservationDateTime).format('MMMM Do'),\r\n        weekday: dayjs(data.LocalObservationDateTime).format('dddd'),\r\n        currHour: dayjs(data.LocalObservationDateTime).format('HH'),\r\n        weatherDescription: data.WeatherText,\r\n        weatherIcon: data.WeatherIcon,\r\n        temperature: data.Temperature.Metric.Value,\r\n        temperatureUnit: data.Temperature.Metric.Unit,\r\n    }\r\n}\r\n","import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport { forecastService } from \"../services/forecast-service\";\r\n\r\nexport const getCurrentWeather = createAsyncThunk(\r\n    \"weather/getCurrentWeather\",\r\n    async (payload) => {\r\n        const { Key, LocalizedName } = payload\r\n        try {\r\n            const currentWeather = await forecastService.getCurrentConditions(Key, LocalizedName)\r\n            return currentWeather\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n\r\n    }\r\n)\r\n\r\nexport const weatherSlice = createSlice({\r\n    name: 'weather',\r\n    initialState: {\r\n        locationWeather: null,\r\n        isLoading: false,\r\n        isError: false,\r\n    },\r\n    reducers: {},\r\n    extraReducers: {\r\n        [getCurrentWeather.pending]: (state) => {\r\n            state.status = \"loading\"\r\n            state.isLoading = true\r\n            state.isError = false\r\n        },\r\n        [getCurrentWeather.fulfilled]: (state, action) => {\r\n            state.status = \"success\"\r\n            state.isLoading = false\r\n            state.locationWeather = action.payload\r\n        },\r\n        [getCurrentWeather.rejected]: (state) => {\r\n            state.status = \"failed\"\r\n            state.isLoading = false\r\n            state.isError = true\r\n        },\r\n\r\n    },\r\n})\r\n\r\nexport default weatherSlice.reducer\r\n","import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport { forecastService } from \"../services/forecast-service\";\r\n\r\nexport const getForecast = createAsyncThunk(\r\n    \"forecast/getForecast\",\r\n    async (payload) => {\r\n        const forecast = await forecastService.getFiveDayForcast(payload)\r\n        return forecast\r\n    }\r\n)\r\n\r\nconst forecastSlice = createSlice({\r\n    name: 'forecast',\r\n    initialState: {\r\n        locationForecast: null,\r\n        isLoading: false,\r\n        isError: false,\r\n    },\r\n    reducers: {},\r\n    extraReducers: {\r\n        [getForecast.pending]: (state) => {\r\n            state.status = \"Loading\"\r\n            state.isLoading = true\r\n            state.isError = false\r\n        },\r\n        [getForecast.fulfilled]: (state, action) => {\r\n            state.status = \"success\"\r\n            state.isLoading = false\r\n            state.locationForecast = action.payload\r\n        },\r\n        [getForecast.rejected]: (state) => {\r\n            state.status = \"faild to retrieve data\"\r\n            state.isLoading = false\r\n            state.isError = true\r\n        },\r\n    },\r\n})\r\n\r\nexport default forecastSlice.reducer\r\n","import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport { forecastService } from \"../services/forecast-service\";\r\n\r\n\r\nexport const appSlice = createSlice({\r\n    name: 'app',\r\n    initialState: {\r\n        currentLocation: { Key: 215854, LocalizedName: 'Tel Aviv' },\r\n        favoriteLocations: [\r\n            { Key: 2723742, LocalizedName: 'Telégrafo' },\r\n            { Key: 3453754, LocalizedName: 'Telaga Asih' },\r\n        ],\r\n        isDarkMode: false\r\n    },\r\n    reducers: {\r\n        setCurrentLocation: (state, action) => {\r\n            state.currentLocation = action.payload\r\n        },\r\n        addToFavorites: (state, action) => {\r\n            state.favoriteLocations.push(action.payload)\r\n        },\r\n        removeFromFavorites: (state, action) => {\r\n            state.favoriteLocations = state.favoriteLocations.filter(location => location.locationKey !== action.payload.locationKey)\r\n        },\r\n        toggleDarkMode: (state, action) => {\r\n            state.isDarkMode = action.payload\r\n        },\r\n    },\r\n})\r\n\r\nexport const { setCurrentLocation, addToFavorites, removeFromFavorites, toggleDarkMode } = appSlice.actions\r\n\r\nexport default appSlice.reducer","import React, { useState, useEffect } from \"react\"\r\nimport { TextField } from \"@material-ui/core\"\r\nimport { Autocomplete } from \"@material-ui/lab\"\r\nimport { makeStyles } from '@material-ui/styles';\r\n\r\nexport const SearchForm = ({ submitSearch, handleSearchChange, searchOptions }) => {\r\n\r\n    const useStyles = makeStyles(() => ({\r\n        searchForm: {\r\n            marginBottom: \"20px\",\r\n        },\r\n    }))\r\n\r\n    const classes = useStyles()\r\n\r\n    const [searchTxt, setSearchTxt] = useState('')\r\n\r\n    useEffect(() => {\r\n        if (!searchTxt || searchTxt === '') return\r\n        handleSearchChange(searchTxt)\r\n    }, [searchTxt])\r\n\r\n    const onSubmit = (ev) => {\r\n        ev.preventDefault()\r\n        if (!searchTxt || searchTxt === '') return\r\n        submitSearch(searchTxt)\r\n        setSearchTxt('')\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={onSubmit} className={classes.searchForm}>\r\n            <Autocomplete\r\n                clearOnBlur\r\n                onSelect={ev => setSearchTxt(ev.target.value)}\r\n                onInputChange={ev => setSearchTxt(ev.target.value)}\r\n                required\r\n                freeSolo\r\n                id=\"free-solo\"\r\n                options={searchOptions.map((option) => `${option.LocalizedName}`)}\r\n                renderInput={(params) => (\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        sx={{ ml: 1, flex: 1 }}\r\n                        {...params}\r\n                        placeholder=\"Search for Location\"\r\n                        InputProps={{\r\n                            ...params.InputProps,\r\n                            type: 'search',\r\n                        }}\r\n                    />\r\n                )}\r\n            />\r\n        </form>\r\n    )\r\n}","import { useEffect, useState } from 'react';\r\nimport { Card, CardContent, Grid, Typography } from '@material-ui/core';\r\nimport { WbSunnyOutlined, NightsStayOutlined } from '@material-ui/icons';\r\n\r\nexport const LocationCurrentWeather = ({ locationWeather }) => {\r\n    const [isNight, setIsNight] = useState(false)\r\n    const { locationName, date, weekday, currHour, weatherDescription, temperature, temperatureUnit } = locationWeather\r\n\r\n    useEffect(async () => {\r\n        selectDayNightIcon()\r\n    }, [])\r\n\r\n    const selectDayNightIcon = async () => {\r\n        if (currHour < 6 || currHour > 18) setIsNight(true)\r\n    }\r\n\r\n    return (\r\n        <Card >\r\n            <CardContent >\r\n                <Grid container spacing={4}>\r\n                    <Grid container item xs={12} spacing={1}>\r\n                        <Grid item xs={12}>\r\n                            <Typography variant=\"h5\" component=\"div\">\r\n                                {locationName}\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            {isNight ? <NightsStayOutlined color='secondary' /> : <WbSunnyOutlined color='secondary' />}\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Typography sx={{ mb: 1.5 }} color='textSecondary'>\r\n                                {weekday}, {date}\r\n                            </Typography>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid container item xs={12} spacing={2}>\r\n                        <Grid item xs={12}>\r\n                            <Typography variant=\"h5\">\r\n                                {temperature} &deg;{temperatureUnit}\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item xs={12} >\r\n                            <Typography variant='subtitle1' color='textSecondary'>\r\n                                {weatherDescription}\r\n                            </Typography>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}","import Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport WbSunnyOutlinedIcon from '@material-ui/icons/WbSunnyOutlined';\r\n\r\nimport dayjs from \"dayjs\";\r\nimport advancedFormat from 'dayjs/plugin/advancedFormat'\r\nimport { Grid } from '@material-ui/core';\r\n\r\ndayjs.extend(advancedFormat)\r\n\r\nexport const DayForecastItem = ({ dayForcast }) => {\r\n\r\n\r\n    const { Date, Temperature } = dayForcast\r\n    const weekday = dayjs(Date).format('dddd')\r\n\r\n    return (\r\n        <Card variant=\"outlined\" >\r\n            <CardContent >\r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={4}>\r\n                        <Typography >\r\n                            {weekday}\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <WbSunnyOutlinedIcon />\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <Typography>\r\n                            {Temperature.Minimum.Value} - {Temperature.Maximum.Value} &deg;{Temperature.Minimum.Unit}\r\n                        </Typography>\r\n                    </Grid>\r\n                </Grid>\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}","import { DayForecastItem } from \"./DayForecastItem\";\r\n\r\nexport const LocationForecast = ({ locationForecast }) => {\r\n    const { DailyForecasts } = locationForecast\r\n\r\n    return (\r\n        <div>\r\n            {DailyForecasts.map(dayForcast =>\r\n                <DayForecastItem dayForcast={dayForcast} key={dayForcast.Date} />\r\n            )}\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState } from \"react\"\r\nimport { useSelector, useDispatch } from \"react-redux\"\r\n\r\nimport { Checkbox, Container, Grid, Paper } from \"@material-ui/core\"\r\nimport FavoriteBorderIcon from \"@material-ui/icons/FavoriteBorder\"\r\nimport FavoriteIcon from \"@material-ui/icons/Favorite\"\r\n\r\nimport { forecastService } from \"../services/forecast-service\"\r\nimport { getCurrentWeather } from \"../redux/weatherSlice\"\r\nimport { getForecast } from \"../redux/forecastSlice\"\r\n\r\nimport { setCurrentLocation, addToFavorites, removeFromFavorites } from \"../redux/appSlice\"\r\n\r\nimport { SearchForm } from \"../cmps/SearchForm\"\r\nimport { LocationCurrentWeather } from \"../cmps/LocationCurrentWeather\"\r\nimport { LocationForecast } from \"../cmps/LocationForecast\"\r\n\r\n\r\nexport const WeatherPage = () => {\r\n\r\n    const [searchOptions, setSearchOptions] = useState([])\r\n    const { currentLocation } = useSelector((state) => state.app)\r\n    const { locationWeather } = useSelector((state) => state.weather)\r\n    const { locationForecast } = useSelector((state) => state.forecast)\r\n    const dispatch = useDispatch()\r\n\r\n    const [isFavorite, setIsFavorite] = useState(false)\r\n\r\n    useEffect(() => {\r\n        dispatch(getCurrentWeather(currentLocation))\r\n        dispatch(getForecast(currentLocation.Key))\r\n    }, [])\r\n\r\n    const handleSearchChange = async (searchTxt) => {\r\n        const result = await forecastService.getLocationOptions(searchTxt)\r\n        setSearchOptions(result)\r\n    }\r\n\r\n    const onSubmit = async (searchTxt) => {\r\n        try {\r\n            const selectedLocation = searchOptions.find(option => option.LocalizedName === searchTxt)\r\n            const { Key, LocalizedName } = selectedLocation\r\n            dispatch(setCurrentLocation({ Key, LocalizedName }))\r\n            dispatch(getCurrentWeather({ Key, LocalizedName }))\r\n            dispatch(getForecast({ Key }))\r\n            setSearchOptions([])\r\n        } catch (err) {\r\n            console.log('error:', err);\r\n        }\r\n    }\r\n\r\n    const toggleIsFavorite = (ev) => {\r\n        setIsFavorite(ev.target.checked)\r\n        if (ev.target.checked) dispatch(addToFavorites(currentLocation))\r\n        else dispatch(removeFromFavorites(currentLocation))\r\n    }\r\n\r\n    return (\r\n        <Paper >\r\n            <SearchForm submitSearch={onSubmit} handleSearchChange={handleSearchChange} searchOptions={searchOptions} />\r\n            <Grid container>\r\n                <Grid item xs={10}>\r\n                    {locationWeather && <LocationCurrentWeather locationWeather={locationWeather} />}\r\n                </Grid>\r\n                <Grid item xs={2}>\r\n                    <Checkbox\r\n                        checked={isFavorite}\r\n                        onChange={toggleIsFavorite}\r\n                        color=\"primary\"\r\n                        icon={<FavoriteBorderIcon />}\r\n                        checkedIcon={<FavoriteIcon />}\r\n                    />\r\n                </Grid>\r\n                <Grid item item xs={12}>\r\n                    {locationForecast && <LocationForecast locationForecast={locationForecast} />}\r\n\r\n                </Grid>\r\n            </Grid>\r\n        </Paper>\r\n    )\r\n}","import { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Checkbox, Grid, IconButton } from \"@material-ui/core\"\r\nimport FavoriteBorderIcon from \"@material-ui/icons/FavoriteBorder\"\r\nimport FavoriteIcon from \"@material-ui/icons/Favorite\"\r\nimport ArrowForwardIosOutlinedIcon from \"@material-ui/icons/ArrowForwardIosOutlined\"\r\nimport { useState, useEffect } from 'react';\r\nimport { useDispatch } from \"react-redux\"\r\nimport { setCurrentLocation, addToFavorites, removeFromFavorites } from \"../redux/appSlice\"\r\nimport { useHistory } from 'react-router';\r\n\r\nconst useStyles = makeStyles({\r\n    layout: {\r\n        display: 'flex',\r\n        justifyContent: 'space-around'\r\n    },\r\n    flag: {\r\n        alignSelf: 'center'\r\n    },\r\n    content: {\r\n        display: 'flex',\r\n        flexGrow: 1,\r\n        justifyContent: 'space-between',\r\n    }\r\n});\r\n\r\n\r\nexport const FavoriteItem = ({ location }) => {\r\n\r\n    const { locationKey, locationName, temperature, temperatureUnit } = location\r\n    const classes = useStyles();\r\n    const [isFavorite, setIsFavorite] = useState(true)\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n\r\n    useEffect(() => {\r\n\r\n    }, [isFavorite])\r\n\r\n    const toggleIsFavorite = (ev) => {\r\n        setIsFavorite(ev.target.checked)\r\n        if (ev.target.checked) dispatch(addToFavorites({ locationKey, locationName }))\r\n        else dispatch(removeFromFavorites({ locationKey, locationName }))\r\n    }\r\n\r\n    const onSetLocation = () => {\r\n        dispatch(setCurrentLocation({ locationKey, locationName }))\r\n        history.push('/')\r\n    }\r\n\r\n    return (\r\n        <Grid item xs={12} md={6}>\r\n            <Card item xs={12} variant='outlined' >\r\n                <CardContent >\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={4} sm={6} md={12} >\r\n                            \r\n                            <Typography variant='h6'>\r\n                                {locationName}\r\n                            </Typography>\r\n                            <Typography variant='caption' color='textSecondary'>\r\n                                {locationKey}\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item xs={4} sm={6} md={12}>\r\n                            <Typography variant='h6'>\r\n                                {temperature} &deg;{temperatureUnit}\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid container item xs={4} sm={12}>\r\n                            <Grid item sm={6}>\r\n\r\n                                <Checkbox\r\n                                    checked={isFavorite}\r\n                                    onChange={toggleIsFavorite}\r\n                                    color='secondary'\r\n                                    icon={<FavoriteBorderIcon />}\r\n                                    checkedIcon={<FavoriteIcon />}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item sm={6}>\r\n                                <IconButton onClick={onSetLocation} aria-label=\"location-details\" color='secondary'>\r\n                                    <ArrowForwardIosOutlinedIcon />\r\n                                </IconButton>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </CardContent>\r\n            </Card>\r\n        </Grid>\r\n    )\r\n}","import { Grid } from '@material-ui/core'\r\nimport {FavoriteItem} from './FavoriteItem'\r\n\r\nexport const FavoritesList = ({ favoritesToDisplay }) => {\r\n    \r\n    return (\r\n        <Grid container spacing={1} >\r\n            {favoritesToDisplay.map(location =>\r\n                <FavoriteItem location={location} key={location.locationKey} />\r\n            )}\r\n        </Grid>\r\n    )\r\n}","import { Container, Typography } from \"@material-ui/core\"\r\nimport { useEffect, useState } from \"react\"\r\nimport { useSelector } from \"react-redux\"\r\nimport { FavoritesList } from \"../cmps/FavoritesList\"\r\nimport { forecastService } from \"../services/forecast-service\"\r\n\r\nexport const FavoritesPage = () => {\r\n    const { favoriteLocations } = useSelector(state => state.app)\r\n    const [favoritesToDisplay, setFavoritesToDisplay] = useState([])\r\n\r\n    useEffect(() => {\r\n        loadFavoritesWeather(favoriteLocations)\r\n    }, [])\r\n\r\n    const loadFavoritesWeather = async (favoriteLocations) => {\r\n        const favoritesWeather = await forecastService.getFavoritesWeather(favoriteLocations)\r\n        setFavoritesToDisplay(favoritesWeather)\r\n    }\r\n    \r\n    return (\r\n        <Container xs={12}>\r\n            <Typography variant='h5' >Favorites</Typography>\r\n            <FavoritesList favoritesToDisplay={favoritesToDisplay} />\r\n        </Container>\r\n    )\r\n}","import { useState } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { makeStyles, Grid, Paper } from '@material-ui/core';\nimport { ThemeProvider, createTheme } from '@material-ui/core/styles';\n\nimport './App.css';\nimport { Header } from './cmps/Header';\nimport { WeatherPage } from './pages/WeatherPage';\nimport { FavoritesPage } from './pages/FavoritesPage';\n\n\nfunction App() {\n  const [isDarkMode, setIsDarkMode] = useState(false)\n  const theme = createTheme({\n    palette: {\n      type: isDarkMode ? 'dark' : 'light',\n      primary: {\n        main: isDarkMode ? '#263238' : '#1de9b6',\n      },\n      secondary: {\n        main: '#1de9b6',\n      },\n      background: {\n        paper: isDarkMode ? '#263238' : '#f5f5f5',\n        default: isDarkMode ? '#263238' : '#f5f5f5',\n      }\n    },\n\n  })\n\n  const toggleDarkMode = (ev) => {\n    setIsDarkMode(ev.target.checked)\n  }\n\n\n  return (\n    <Router>\n      <ThemeProvider theme={theme}>\n        <Paper className=\"App\" >\n          <Header toggleDarkMode={toggleDarkMode} />\n          <Grid container>\n            <Grid item xs={false} sm={2} lg={3} />\n            <Grid item xs={12} sm={8} lg={6}>\n              <Switch>\n                <Route path=\"/favorites\" component={FavoritesPage} />\n                <Route path=\"/\" component={WeatherPage} />\n              </Switch>\n            </Grid>\n            <Grid item xs={false} sm={2} lg={3} />\n          </Grid>\n        </Paper>\n      </ThemeProvider>\n    </Router>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport weatherReducer from './weatherSlice'\r\nimport forecastReducer from './forecastSlice'\r\nimport appSlice from './appSlice';\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        weather: weatherReducer,\r\n        forecast: forecastReducer,\r\n        app: appSlice,\r\n    },\r\n})\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport { Provider } from 'react-redux'\nimport store from './redux/store'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store }>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}